{
  "version": 3,
  "sources": ["../../.pnpm/make-error@1.3.6/node_modules/make-error/index.js", "../../.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/src/errors.ts", "../../.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/src/format.ts", "../../.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/src/types.ts", "../../.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/src/parse.ts", "../../.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/src/index.ts", "../../.pnpm/msafe-wallet@2.1.5/node_modules/msafe-wallet/src/JsonRPCServer.ts", "../../.pnpm/msafe-wallet@2.1.5/node_modules/msafe-wallet/src/coder.ts", "../../.pnpm/msafe-wallet@2.1.5/node_modules/msafe-wallet/src/utils.ts", "../../.pnpm/msafe-wallet@2.1.5/node_modules/msafe-wallet/src/WalletAPI.ts", "../../.pnpm/msafe-wallet@2.1.5/node_modules/msafe-wallet/src/version.ts", "../../.pnpm/msafe-wallet@2.1.5/node_modules/msafe-wallet/src/MSafeServer.ts", "../../.pnpm/msafe-wallet@2.1.5/node_modules/msafe-wallet/src/HandshakeMessage.ts", "../../.pnpm/msafe-wallet@2.1.5/node_modules/msafe-wallet/src/connector.ts", "../../.pnpm/msafe-wallet@2.1.5/node_modules/msafe-wallet/src/JsonRPCClient.ts", "../../.pnpm/msafe-wallet@2.1.5/node_modules/msafe-wallet/src/MSafeWallet.ts", "../../.pnpm/msafe-plugin-wallet-adapter@0.1.0/node_modules/msafe-plugin-wallet-adapter/dist/index.mjs"],
  "sourcesContent": ["// ISC @ Julien Fontanet\n\n\"use strict\";\n\n// ===================================================================\n\nvar construct = typeof Reflect !== \"undefined\" ? Reflect.construct : undefined;\nvar defineProperty = Object.defineProperty;\n\n// -------------------------------------------------------------------\n\nvar captureStackTrace = Error.captureStackTrace;\nif (captureStackTrace === undefined) {\n  captureStackTrace = function captureStackTrace(error) {\n    var container = new Error();\n\n    defineProperty(error, \"stack\", {\n      configurable: true,\n      get: function getStack() {\n        var stack = container.stack;\n\n        // Replace property with value for faster future accesses.\n        defineProperty(this, \"stack\", {\n          configurable: true,\n          value: stack,\n          writable: true,\n        });\n\n        return stack;\n      },\n      set: function setStack(stack) {\n        defineProperty(error, \"stack\", {\n          configurable: true,\n          value: stack,\n          writable: true,\n        });\n      },\n    });\n  };\n}\n\n// -------------------------------------------------------------------\n\nfunction BaseError(message) {\n  if (message !== undefined) {\n    defineProperty(this, \"message\", {\n      configurable: true,\n      value: message,\n      writable: true,\n    });\n  }\n\n  var cname = this.constructor.name;\n  if (cname !== undefined && cname !== this.name) {\n    defineProperty(this, \"name\", {\n      configurable: true,\n      value: cname,\n      writable: true,\n    });\n  }\n\n  captureStackTrace(this, this.constructor);\n}\n\nBaseError.prototype = Object.create(Error.prototype, {\n  // See: https://github.com/JsCommunity/make-error/issues/4\n  constructor: {\n    configurable: true,\n    value: BaseError,\n    writable: true,\n  },\n});\n\n// -------------------------------------------------------------------\n\n// Sets the name of a function if possible (depends of the JS engine).\nvar setFunctionName = (function() {\n  function setFunctionName(fn, name) {\n    return defineProperty(fn, \"name\", {\n      configurable: true,\n      value: name,\n    });\n  }\n  try {\n    var f = function() {};\n    setFunctionName(f, \"foo\");\n    if (f.name === \"foo\") {\n      return setFunctionName;\n    }\n  } catch (_) {}\n})();\n\n// -------------------------------------------------------------------\n\nfunction makeError(constructor, super_) {\n  if (super_ == null || super_ === Error) {\n    super_ = BaseError;\n  } else if (typeof super_ !== \"function\") {\n    throw new TypeError(\"super_ should be a function\");\n  }\n\n  var name;\n  if (typeof constructor === \"string\") {\n    name = constructor;\n    constructor =\n      construct !== undefined\n        ? function() {\n            return construct(super_, arguments, this.constructor);\n          }\n        : function() {\n            super_.apply(this, arguments);\n          };\n\n    // If the name can be set, do it once and for all.\n    if (setFunctionName !== undefined) {\n      setFunctionName(constructor, name);\n      name = undefined;\n    }\n  } else if (typeof constructor !== \"function\") {\n    throw new TypeError(\"constructor should be either a string or a function\");\n  }\n\n  // Also register the super constructor also as `constructor.super_` just\n  // like Node's `util.inherits()`.\n  //\n  // eslint-disable-next-line dot-notation\n  constructor.super_ = constructor[\"super\"] = super_;\n\n  var properties = {\n    constructor: {\n      configurable: true,\n      value: constructor,\n      writable: true,\n    },\n  };\n\n  // If the name could not be set on the constructor, set it on the\n  // prototype.\n  if (name !== undefined) {\n    properties.name = {\n      configurable: true,\n      value: name,\n      writable: true,\n    };\n  }\n  constructor.prototype = Object.create(super_.prototype, properties);\n\n  return constructor;\n}\nexports = module.exports = makeError;\nexports.BaseError = BaseError;\n", null, null, null, null, null, "import { Connector } from \"./connector\";\nimport { JsonRpcParamsSchemaByPositional, JsonRpcPayloadRequest, parse, format, JsonRpcError } from 'json-rpc-protocol'\nimport { decodeFromStr, encodeToStr } from \"./coder\";\n\ntype RPCMethod = (...params: any[]) => Promise<any>;\n\nexport class JsonRPCServer {\n\n    constructor(public readonly connector: Connector, readonly methods: { [method: string]: RPCMethod }) {\n        this.connector.on('message', data => this.onRequest(data!));\n        this.connector.on('close', () => this.onClose());\n    }\n\n    private onRequest(data: string) {\n        const req = parse(data) as JsonRpcPayloadRequest;\n        if (req.type !== 'request') return;\n        const method = this.methods[req.method];\n        if (method === undefined) {\n            const resp = format.error(req.id, new JsonRpcError(\"method not exist\"));\n            this.connector.send(resp);\n            return;\n        }\n        method(...(req.params as JsonRpcParamsSchemaByPositional).map(param => decodeFromStr(param))).then(response => {\n            const resp = format.response(req.id, encodeToStr(response));\n            this.connector.send(resp);\n        }).catch(err => {\n            const resp = format.error(req.id, new JsonRpcError(String(err)));\n            this.connector.send(resp);\n        });\n    }\n\n    notify(type: string, data: any[]) {\n        const notification = format.notification(type, data.map(encodeToStr));\n        this.connector.send(notification);\n    }\n\n    get version() {\n        return this.connector.version;\n    }\n\n    private onClose() {\n\n    }\n}", "import { Buffer } from \"buffer\";\nenum Type {\n    Boolean,\n    Number,\n    BigInt,\n    String,\n    Uint8Array,\n    Object,\n    Array,\n    Undefined,\n    Null,\n}\n\nfunction concat(list: Uint8Array[]): Uint8Array {\n    const total = list.reduce((size, a) => size + a.length, 0);\n    const arr = new Uint8Array(total);\n    let offset = 0;\n    list.forEach((a) => {\n        arr.set(a, offset);\n        offset += a.length;\n    });\n    return arr;\n}\n\nclass Decoder {\n    constructor(readonly data: Uint8Array, private byteOffset = data.byteOffset) { }\n\n    read(byteLength: number): Uint8Array {\n        const result = new Uint8Array(this.data.buffer, this.byteOffset, byteLength);\n        this.byteOffset += byteLength;\n        return result;\n    }\n\n    decodeBigInt(): bigint {\n        return BigInt(this.decodeString());\n    }\n\n    decodeNumber(): number {\n        return Number(this.decodeString());\n    }\n\n    decodeUint8Array(): Uint8Array {\n        const length = new Uint32Array(this.read(4).slice(0).buffer)[0];\n        return this.read(length);\n    }\n\n    decodeBoolean(): boolean {\n        return Boolean(this.read(1)[0]);\n    }\n\n    decodeString(): string {\n        const de = this.decodeUint8Array();\n        return Buffer.from(de).toString();\n    }\n\n    decodeArray(): any[] {\n        const length = this.decode<number>(); // decodeNumber\n        return Array(length).fill(0).map(() => this.decode());\n    }\n\n    decodeObject(): { [key: string]: any } {\n        const length = this.decode<number>(); // decodeNumber\n        const entries = Array(length).fill(0).map(() => [this.decode<string>(), this.decode()]);\n        return Object.fromEntries(entries);\n    }\n\n    decode<T>(): T {\n        const type = this.read(1)[0] as Type;\n        switch (type) {\n            case Type.BigInt:\n                return this.decodeBigInt() as any;\n            case Type.Number:\n                return this.decodeNumber() as any;\n            case Type.Boolean:\n                return this.decodeBoolean() as any;\n            case Type.String:\n                return this.decodeString() as any;\n            case Type.Uint8Array:\n                return this.decodeUint8Array() as any;\n            case Type.Array:\n                return this.decodeArray() as any;\n            case Type.Object:\n                return this.decodeObject() as any;\n            case Type.Undefined:\n                return undefined as any;\n            case Type.Null:\n                return null as any;\n        }\n        throw `unkonw type: ${type}`;\n    }\n}\n\nfunction encodeUint8Array(data: Uint8Array): Uint8Array {\n    const en = new Uint8Array(data.length + 5);\n    en[0] = Type.Uint8Array;\n    Buffer.from(en.buffer, 1, 4).writeUInt32LE(data.length);\n    en.set(data, 5);\n    return en;\n}\n\n\nfunction encodeUndefined(): Uint8Array {\n    return Uint8Array.from([Type.Undefined])\n}\n\nfunction encodeNull(): Uint8Array {\n    return Uint8Array.from([Type.Null])\n}\n\nfunction encodeBigInt(data: bigint): Uint8Array {\n    const en = encodeString(data.toString());\n    en[0] = Type.BigInt;\n    return en;\n}\n\nfunction encodeNumber(data: number): Uint8Array {\n    const en = encodeString(data.toString());\n    en[0] = Type.Number;\n    return en;\n}\n\nfunction encodeBoolean(data: boolean): Uint8Array {\n    return new Uint8Array([Type.Boolean, Number(data)]);\n}\n\nfunction encodeString(data: string): Uint8Array {\n    const buf = new ArrayBuffer(data.length);\n    Buffer.from(buf).write(data);\n    const en = encodeUint8Array(new Uint8Array(buf));\n    en[0] = Type.String;\n    return en;\n}\n\nfunction encodeObject(data: { [key: string]: any }): Uint8Array {\n    const entries = Object.entries(data);\n    const ens = entries.map(([key, value]) => {\n        const keyBuf = encode<string>(key);\n        const valueBuf = encode(value);\n        return concat([keyBuf, valueBuf]);\n    });\n    return concat([Uint8Array.from([Type.Object]), encode<number>(entries.length), ...ens]);\n}\n\n\nfunction encodeArray(data: any[]): Uint8Array {\n    const ens = data.map(elem => encode(elem));\n    return concat([Uint8Array.from([Type.Array]), encode<number>(ens.length), ...ens]);\n}\n\n\nexport function encode<T>(data: T): Uint8Array {\n    if (data instanceof Uint8Array) {\n        return encodeUint8Array(data);\n    }\n    if (data instanceof Array) {\n        return encodeArray(data);\n    }\n    if (data instanceof Object) {\n        return encodeObject(data);\n    }\n    if (data === null) {\n        return encodeNull();\n    }\n    switch (typeof data) {\n        case 'string':\n            return encodeString(data);\n        case 'number':\n            return encodeNumber(data);\n        case 'bigint':\n            return encodeBigInt(data);\n        case 'boolean':\n            return encodeBoolean(data);\n        case 'undefined':\n            return encodeUndefined();\n    }\n    throw `unsuport type: ${data}`;\n}\n\nexport function decode<T>(data: Uint8Array): T {\n    const decoder = new Decoder(data);\n    return decoder.decode();\n}\n\nexport function encodeToStr<T>(data: T): string {\n    return Buffer.from(encode(data).buffer).toString('hex');\n}\n\nexport function decodeFromStr<T>(data: string): T {\n    const buffer = new ArrayBuffer(data.length / 2);\n    Buffer.from(buffer).write(data, 'hex');\n    return decode(new Uint8Array(buffer));\n}\n\n", "import {Account, LegacyAccount} from \"./WalletAPI\";\n\nexport function toLegacyAccount(account: Account): LegacyAccount {\n  return {\n    address: account.address,\n    publicKey: convertPKsToMultiSigPK(account.publicKey, account.minKeysRequired),\n  };\n}\n\nfunction convertPKsToMultiSigPK(pks: string[], threshold: number) {\n  let msPk = pks.map(pk => pk.startsWith('0x') ? pk.substring(2) : pk).join('');\n  msPk += threshold.toString(16).padStart(2, '0');\n  return '0x' + msPk;\n}", "import { toLegacyAccount } from \"./utils\";\n\nexport interface Account {\n    publicKey: string[];\n    address: string;\n    authKey: string;\n    minKeysRequired: number;\n}\n\nexport interface LegacyAccount {\n    address: string,\n    publicKey: string,\n}\n\nexport type Option = Partial<{\n    max_gas_amount: string | bigint,\n    gas_unit_price: string | bigint,\n    expiration_timestamp_secs: string | bigint,\n    sequence_number: string | bigint,\n    sender: string,\n}>;\n\ntype Array<T> = T[];\ntype Base = string | number | BigInt | Uint8Array | boolean;\ntype Arg<T> = T | Array<Base>;\ntype Args = Array<Arg<Base>>;\n\nexport type Payload = {\n    function: string,\n    type_arguments: string[],\n    arguments: Args,\n} | Uint8Array;\n\nexport interface WalletAPI {\n    connect(): Promise<Account>,\n    disconnect(): Promise<void>,\n    isConnected(): Promise<boolean>,\n    network(): Promise<string>,\n    account(): Promise<Account>,\n    chainId(): Promise<Number>,\n    signAndSubmit(payload: Payload, option?: Option): Promise<Uint8Array>,\n    signTransaction(payload: Payload, option?: Option): Promise<Uint8Array>,\n    signMessage(message: string | Uint8Array): Promise<Uint8Array>,\n}\n\nexport enum WalletEvent {\n    ChangeAccount = 'ChangeAccountEvent',\n    ChangeNetwork = 'ChangeNetworkEvent',\n}\n\nexport enum WalletRPC {\n    connect = 'connect',\n    disconnect = 'disconnect',\n    isConnected = 'isConnected',\n    network = 'network',\n    account = 'account',\n    chainId = 'chainId',\n    signAndSubmit = 'signAndSubmit',\n    signTransaction = 'signTransaction',\n    signMessage = 'signMessage',\n}\n\n// LegacyWalletAPI is the adapted version of walletAPI.\n// It allows backward compatibility with legacy clients with account format `LegacyAccount`\ninterface LegacyWalletAPI {\n    connect(): Promise<LegacyAccount>,\n    disconnect(): Promise<void>,\n    isConnected(): Promise<boolean>,\n    network(): Promise<string>,\n    account(): Promise<LegacyAccount>,\n    chainId(): Promise<Number>,\n    signAndSubmit(payload: Payload, option?: Option): Promise<Uint8Array>,\n    signTransaction(payload: Payload, option?: Option): Promise<Uint8Array>,\n    signMessage(message: string | Uint8Array): Promise<Uint8Array>,\n}\n\nexport function adaptLegacyAccount(methods: WalletAPI): LegacyWalletAPI {\n    // Adapt legacy account\n    return {\n        connect(): Promise<LegacyAccount> {\n            return methods.connect().then(account => toLegacyAccount(account));\n        },\n        disconnect(): Promise<void> {\n            return methods.disconnect();\n        },\n        isConnected(): Promise<boolean> {\n            return methods.isConnected();\n        },\n        network(): Promise<string> {\n            return methods.network();\n        },\n        account(): Promise<LegacyAccount> {\n            return methods.account().then(account => toLegacyAccount(account));\n        },\n        chainId(): Promise<Number> {\n            return methods.chainId();\n        },\n        signAndSubmit(payload: Payload, option?: Option): Promise<Uint8Array> {\n            return methods.signAndSubmit(payload, option);\n        },\n        signTransaction(payload: Payload, option?: Option): Promise<Uint8Array> {\n            return methods.signTransaction(payload, option);\n        },\n        signMessage(message: string | Uint8Array): Promise<Uint8Array> {\n            return methods.signMessage(message);\n        }\n    };\n}", "\n/// Versions that introduces new features.\nexport enum Versions {\n    ALLOWLIST = '2.0.5', // version that enable allowlist\n    SESSION_ID = '2.1.4', // version that enable session id\n};\n\n/// Compare two version strings.\nexport function cmp(a: string, b: string): number {\n    const parse = (version: string) => version.split('.').map(Number);\n    const [majorA, minorA, batchA] = parse(a);\n    const [majorB, minorB, batchB] = parse(b);\n    if (majorA > majorB) return 1;\n    if (majorA < majorB) return -1;\n    if (minorA > minorB) return 1;\n    if (minorA < minorB) return -1;\n    if (batchA > batchB) return 1;\n    if (batchA < batchB) return -1;\n    return 0;\n}\n\nexport function isSessionIDVersion(version: string | undefined): boolean {\n    return version !== undefined && cmp(version, Versions.SESSION_ID) >= 0;\n}\n\n/// Check if the version is enable allowlist.\nexport function isAllowList(version: string | undefined): boolean {\n    return version !== undefined && cmp(version, Versions.ALLOWLIST) >= 0;\n}\n\nexport function isMultiSigFormatVersion(version: string | undefined): boolean {\n    return version !== undefined;\n}\n\n/// Check if the version is enable versioned handshake message.\nexport function isVersionedHandshakeVersion(version: string | undefined): boolean {\n    return version !== undefined;\n}", "import {Connector} from \"./connector\";\nimport {JsonRPCServer} from \"./JsonRPCServer\";\nimport {Account, adaptLegacyAccount, WalletAPI, WalletEvent} from \"./WalletAPI\";\nimport {isMultiSigFormatVersion} from \"./version\";\nimport {toLegacyAccount} from \"./utils\";\n\nexport class MSafeServer {\n\n  public server: JsonRPCServer;\n\n  constructor(connector: Connector, methods: WalletAPI) {\n    if (isMultiSigFormatVersion(connector.version.peer)) {\n      this.server = new JsonRPCServer(connector, methods as any);\n    } else {\n      // backward compatibility\n      const legacyWalletAPI = adaptLegacyAccount(methods);\n      this.server = new JsonRPCServer(connector, legacyWalletAPI as any);\n    }\n  }\n\n  changeNetwork(network: string) {\n        this.server.notify(WalletEvent.ChangeNetwork, [network]);\n  }\n\n  changeAccount(account: Account) {\n    const peerVersion = this.version.peer;\n    if (isMultiSigFormatVersion(peerVersion)) {\n      this.server.notify(WalletEvent.ChangeAccount, [account]);\n    } else {\n      const legacyAccount = toLegacyAccount(account);\n      this.server.notify(WalletEvent.ChangeAccount, [legacyAccount]);\n    }\n  }\n\n  get version() {\n    return this.server.version;\n  }\n}\n\n\n", "import { isSessionIDVersion, isVersionedHandshakeVersion } from \"./version\";\n\nexport class HandshakeMessage {\n    static HANDSHAKE_REQ = 'HANDSHAKE_REQ';\n    static HANDSHAKE_ACK = 'HANDSHAKE_ACK';\n    static HANDSHAKE_PORT_ACK = 'HANDSHAKE_PORT_REQ';\n    handshakeType: string;\n    version: string | undefined;\n    sessionID: number | undefined;\n    constructor(handshakeType: string, version?: string, sessionID?: number) {\n        this.handshakeType = handshakeType;\n        if (version !== undefined) this.version = version;\n        if (sessionID !== undefined) this.sessionID = sessionID;\n    }\n\n    // When responding to a lower-version client, a lower-version message is required.\n    toString(messageVersion:string | undefined): string {\n        if (isSessionIDVersion(messageVersion)) {\n            if (this.sessionID === undefined) throw Error('sessionID is undefined');\n            return `${this.handshakeType}:${this.version}:${this.sessionID}`;\n        }\n        if (isVersionedHandshakeVersion(messageVersion)) return `${this.handshakeType}:${this.version}`;\n        return this.handshakeType;\n    }\n\n    isHandshakeMessage(handshakeType: string): boolean {\n        if(this.handshakeType !== handshakeType) return false;\n        if (isSessionIDVersion(this.version) && this.sessionID === undefined) return false;\n        return true;\n    }\n\n    static fromString(message: string): HandshakeMessage {\n        const [handshakeType, version, sessionID] = message.split(':');\n        return new HandshakeMessage(handshakeType, version, Number(sessionID));\n    }\n\n}\n", "import { version } from '../package.json';\nimport { HandshakeMessage } from './HandshakeMessage';\nimport { isAllowList, isSessionIDVersion } from './version';\n\nexport class Connector {\n    static version = version;\n    static sessionID = 0;\n    connected = true;\n    onClose?: () => void;\n    onMessage?: (data: any) => void;\n    constructor(public readonly port: MessagePort, public readonly peerVersion: string | undefined, public readonly sessionID: number | undefined) {\n        this.port.onmessage = (ev) => {\n            this.onMessage && this.onMessage(ev.data);\n        };\n        this.port.onmessageerror = () => {\n            this.close();\n        };\n    }\n\n    send(data: any) {\n        this.port.postMessage(data);\n    }\n\n    on(type: 'close' | 'message', handle: (data?: string) => void) {\n        switch (type) {\n            case 'close':\n                this.onClose = handle;\n                break;\n            case 'message':\n                this.onMessage = handle;\n                break;\n            default:\n                throw Error(\"invlaid type\");\n        }\n    }\n\n    get version() {\n        return {\n            self: Connector.version,\n            peer: this.peerVersion,\n        }\n    }\n\n    close() {\n        if (this.connected) {\n            this.port.close();\n            this.connected = false;\n            this.onClose && this.onClose();\n        }\n    }\n\n    static newSessionID() {\n        return Connector.sessionID++;\n    }\n\n    // client connect to server\n    static async connect(targetWindow: any, origins: string[]): Promise<Connector> {\n        return new Promise((resolve, rejected) => {\n            const sessionID = Connector.newSessionID();\n            let cleaner = () => { };\n            let timer = setTimeout(() => {\n                cleaner();\n                rejected(`connect timeout: ${sessionID}`);\n            }, 1000);\n            const handle = (ev: MessageEvent) => {\n                const port = ev.ports[0];\n                if (!origins.includes(ev.origin)) return;\n                if (typeof ev.data !== 'string') return;\n                const handshakeMessage = HandshakeMessage.fromString(ev.data);\n                if (!handshakeMessage.isHandshakeMessage(HandshakeMessage.HANDSHAKE_PORT_ACK)) return;\n                if (handshakeMessage.sessionID !== sessionID) return;\n                cleaner();\n                resolve(new Connector(port, handshakeMessage.version, sessionID));\n            };\n            cleaner = () => {\n                clearTimeout(timer);\n                window.removeEventListener('message', handle);\n            };\n            window.addEventListener('message', handle);\n            const handshakeMessage = new HandshakeMessage(HandshakeMessage.HANDSHAKE_REQ, Connector.version, sessionID);\n            targetWindow.postMessage(handshakeMessage.toString(handshakeMessage.version), '*');\n        });\n    }\n    // server listening connection request\n    static accepts(origin: string, handler: (connector: Connector) => void): () => void {\n        origin = new URL(origin).origin;\n        const handle = (ev: MessageEvent) => {\n            if (ev.origin !== origin) return;\n            if (typeof ev.data !== 'string') return;\n            const handshakeMessage = HandshakeMessage.fromString(ev.data);\n            if (!handshakeMessage.isHandshakeMessage(HandshakeMessage.HANDSHAKE_REQ)) return;\n\n            const peerVersion = handshakeMessage.version;\n            const thisVersion = Connector.version;\n            if (isSessionIDVersion(peerVersion)) {\n                const channelPair = new MessageChannel();\n                const replyMessage = new HandshakeMessage(HandshakeMessage.HANDSHAKE_PORT_ACK, thisVersion, handshakeMessage.sessionID);\n                (ev.source as Window).postMessage(replyMessage.toString(peerVersion), ev.origin, [channelPair.port2]);\n                handler(new Connector(channelPair.port1, peerVersion, handshakeMessage.sessionID));\n            } else if (isAllowList(peerVersion)) {\n                const channelPair = new MessageChannel();\n                const replyMessage = new HandshakeMessage(HandshakeMessage.HANDSHAKE_PORT_ACK, thisVersion);\n                (ev.source as Window).postMessage(replyMessage.toString(peerVersion), ev.origin, [channelPair.port2]);\n                handler(new Connector(channelPair.port1, peerVersion, undefined));\n            } else {\n                const port = ev.ports[0];\n                const replyMessage = new HandshakeMessage(HandshakeMessage.HANDSHAKE_ACK, thisVersion);\n                port.postMessage(replyMessage.toString(peerVersion));\n                handler(new Connector(ev.ports[0], peerVersion, undefined));\n            }\n        };\n        window.addEventListener('message', handle);\n        return () => window.removeEventListener('message', handle);\n    }\n\n    static async accept(origin: string): Promise<Connector> {\n        return new Promise((resolve) => {\n            const cleaner = this.accepts(origin, (connector) => {\n                resolve(connector);\n                cleaner();\n            });\n        });\n    }\n}", "import { Connector } from \"./connector\";\nimport { JsonRpcParamsSchemaByPositional, parse, format, JsonRpcPayloadResponse, JsonRpcPayloadNotification, JsonRpcPayloadError } from 'json-rpc-protocol'\nimport { encodeToStr, decodeFromStr } from \"./coder\";\n\ntype executorFunc = (data: any) => void;\ntype executor = { resolve: executorFunc, reject: executorFunc };\ntype notifier = (...params: any[]) => void;\n\nexport class JsonRPCClient {\n    id: number = 0;\n    executors: { [id: number]: executor } = {};\n    constructor(public readonly connector: Connector, readonly notifiers: { [type: string]: notifier }) {\n        this.connector.on('message', data => this.onMessage(data!));\n        this.connector.on('close', () => this.onClose());\n    }\n    private onMessage(data: string) {\n        const mesg = parse(data) as JsonRpcPayloadResponse | JsonRpcPayloadNotification | JsonRpcPayloadError;\n        switch (mesg.type) {\n            case 'notification':\n                return this.onNotify(mesg.method, (mesg.params as JsonRpcParamsSchemaByPositional).map(decodeFromStr));\n            case 'response':\n                const { resolve } = this.executors[Number(mesg.id)];\n                delete this.executors[Number(mesg.id)];\n                return resolve(decodeFromStr(mesg.result));\n            case 'error':\n                const { reject } = this.executors[Number(mesg.id)];\n                delete this.executors[Number(mesg.id)];\n                return reject(mesg.error.message);\n        }\n\n    }\n    async request(method: string, params: any[] = []): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const reqId = this.id++;\n            this.executors[reqId] = { resolve, reject };\n            const req = format.request(reqId, method, params.map(encodeToStr));\n            this.connector.send(req);\n        });\n    }\n    get version() {\n        return this.connector.version;\n    }\n    private onNotify(type: string, data: any[]) {\n        this.notifiers[type](...data);\n    }\n    private onClose() {\n\n    }\n}", "import { Connector } from \"./connector\";\nimport { JsonRPCClient } from \"./JsonRPCClient\";\nimport { Account, WalletAPI, Option, Payload, WalletEvent, WalletRPC } from \"./WalletAPI\";\ntype onEventFunc = (data: any) => void\n\n/// MSafe website urls, it acts as the default allowlist.\nconst MSafeOrigins = {\n    mainnet: 'https://app.m-safe.io',\n    testnet: 'https://testnet.m-safe.io',\n    partner: 'https://partner.m-safe.io',\n};\n/// Default list of MSafe endpoint URLs.\nconst DefaultMSafeEndpoints = Object.values(MSafeOrigins);\n\n/// NetworkType or MSafe website url as string.\ntype MSafeNetwork = NetworkType | string;\n/// MSafeNetwork or array of MSafeNetwork.\ntype MSafeNetworks = MSafeNetwork | MSafeNetwork[];\n/// Network type of MSafe websites.\n/// It can be 'Mainnet', 'Testnet' or 'Partner'.\ntype NetworkType = keyof typeof MSafeOrigins;\n\nexport class MSafeWallet implements WalletAPI {\n\n    public client: JsonRPCClient;\n\n    events: { [key: string]: onEventFunc } = {};\n\n    constructor(connector: Connector) {\n        const onEvent = (type: string, ...params: any[]) => {\n            const cbk = this.events[type];\n            cbk && cbk(params[0]);\n        };\n        const entries = [\n            WalletEvent.ChangeAccount,\n            WalletEvent.ChangeNetwork\n        ].map(event => [event, (...params: any[]) => onEvent(event, ...params)]);\n        const notifiers = Object.fromEntries(entries);\n        this.client = new JsonRPCClient(connector, notifiers);\n    }\n\n    async connect(): Promise<Account> {\n        return this.client.request(WalletRPC.connect);\n    }\n\n    async isConnected(): Promise<boolean> {\n        return this.client.request(WalletRPC.isConnected);\n    }\n\n    async disconnect() {\n        return this.client.request(WalletRPC.disconnect);\n    }\n\n    onChangeAccount(cbk: (account: Account) => void) {\n        this.events[WalletEvent.ChangeAccount] = cbk;\n    }\n\n    onChangeNetwork(cbk: (network: string) => void) {\n        this.events[WalletEvent.ChangeNetwork] = cbk;\n    }\n\n    async network(): Promise<string> {\n        return this.client.request(WalletRPC.network);\n    }\n\n    async account(): Promise<Account> {\n        return this.client.request(WalletRPC.account);\n    }\n\n    async chainId(): Promise<Number> {\n        return this.client.request(WalletRPC.chainId);\n    }\n\n    async signAndSubmit(payload: Payload, option?: Option): Promise<Uint8Array> {\n        return this.client.request(WalletRPC.signAndSubmit, [payload, option]);\n    }\n\n    async signTransaction(payload: Payload, option?: Option): Promise<Uint8Array> {\n        return this.client.request(WalletRPC.signTransaction, [payload, option]);\n    }\n\n    async signMessage(message: string | Uint8Array): Promise<Uint8Array> {\n        return this.client.request(WalletRPC.signMessage, [message]);\n    }\n\n    get version() {\n        return this.client.version;\n    }\n\n    /**\n     * @description check if current page is running under MSafe wallet\n     */\n    static inMSafeWallet(): boolean {\n        return typeof window !== 'undefined' &&\n            typeof document !== 'undefined' &&\n            typeof parent !== 'undefined' &&\n            typeof parent.window !== 'undefined' &&\n            parent.window !== window\n    }\n    /**\n     * @deprecated use inMSafeWallet instead \n     */\n    static inMsafeWallet(): boolean {\n        return MSafeWallet.inMSafeWallet();\n    }\n\n    /** \n     * @description Get msafe dapp url, which can be used to open dapp under msafe wallet.\n     * @param msafe network type or msafe website url\n     * @param dappUrl dapp url\n     */\n    static getAppUrl(msafe: MSafeNetwork = 'mainnet', dappUrl = `${window.location.href}`): string {\n        const msafeOrigin = MSafeWallet.getOrigin(msafe);\n        return `${msafeOrigin}/aptos/v2/store/0?url=${encodeURIComponent(dappUrl)}`;\n    }\n\n    /**\n     * @description Get msafe origin by network type or url\n     * @param msafeNetwork type or msafe website url\n     * @returns msafe origin\n     */\n    static getOrigin(msafeNetwork: MSafeNetwork = 'mainnet'): string {\n        const endpoint = MSafeOrigins[msafeNetwork.toLowerCase() as NetworkType] || msafeNetwork;\n        return new URL(endpoint).origin;\n    }\n\n    /**\n     * @description Open msafe wallet and establish communication with the msafe website.\n     *              The allowlist is used to check if the msafe website is trusted.\n     * @param allowlist allowlist of msafe website url, omit means accpets all msafe websites. you can pass a single url or an array of urls.\n     * @returns MSafeWallet instance\n     * @example\n     *  // 1. Initialize MSafeWallet with default allowlist:\n     *      const wallet = await MSafeWallet.new();\n     *  // 2. Initialize MSafeWallet with a single MSafe url:\n     *      const wallet = await MSafeWallet.new('https://app.m-safe.io');\n     *  // 3. Initialize MSafeWallet with an array of MSafe urls:\n     *      const wallet = await MSafeWallet.new(['https://app.m-safe.io', 'https://testnet.m-safe.io', 'https://partner.m-safe.io']);\n     *  // 4. Initialize MSafeWallet with a single network type:\n     *      const wallet = await MSafeWallet.new('Mainnet');\n     *  // 5. Initialize MSafeWallet with an array of network types:\n     *      const wallet = await MSafeWallet.new(['Mainnet', 'Testnet', 'Partner']);\n     */\n    static async new(allowlist: MSafeNetworks = DefaultMSafeEndpoints): Promise<MSafeWallet> {\n        const msafeOrigin = allowlist instanceof Array ? allowlist.map(m=>MSafeWallet.getOrigin(m)) : [MSafeWallet.getOrigin(allowlist)];\n        const connector = await Connector.connect(window.parent, msafeOrigin);\n        return new MSafeWallet(connector);\n    }\n}\n\n/**\n * @deprecated use MSafeWallet instead, it will be removed in the future.\n */\nexport class MsafeWallet extends MSafeWallet{}\n", "// src/index.ts\nimport { MSafeWallet } from \"msafe-wallet\";\n\n// src/provider.ts\nimport { HexString } from \"aptos\";\nvar toNetworkName = (network) => network;\nfunction toPluginProvider(msafe) {\n  return {\n    connect: () => {\n      return msafe.connect();\n    },\n    account: () => {\n      return msafe.account();\n    },\n    disconnect: () => {\n      return msafe.disconnect();\n    },\n    signAndSubmitTransaction: async (transaction, options) => {\n      const result = await msafe.signAndSubmit(transaction, options);\n      return { hash: HexString.fromUint8Array(result).hex() };\n    },\n    signMessage: (message) => {\n      throw \"unpported\";\n    },\n    network: () => {\n      return msafe.network().then((network) => toNetworkName(network));\n    },\n    onAccountChange: async (listener) => {\n      return msafe.onChangeAccount((newAddress) => listener(newAddress));\n    },\n    onNetworkChange: async (listener) => {\n      const listenerProxy = async (network) => {\n        const chainId = await msafe.chainId();\n        const networkName = {\n          name: toNetworkName(network),\n          chainId: chainId.toString()\n        };\n        listener({ networkName });\n      };\n      return msafe.onChangeNetwork((network) => listenerProxy(network));\n    }\n  };\n}\n\n// src/logo.ts\nvar LOGO_PNG_BASE64 = \"\";\n\n// src/index.ts\nvar MSafeWalletName = \"MSafe\";\nvar MSafeWalletAdapter = class {\n  constructor(origin) {\n    this.name = MSafeWalletName;\n    this.icon = `data:image/png;base64,${LOGO_PNG_BASE64}`;\n    this.provider = void 0;\n    this._origin = origin;\n    if (MSafeWallet.inMSafeWallet()) {\n      MSafeWallet.new(origin).then((msafe) => {\n        window.msafe = this.provider = toPluginProvider(msafe);\n      }).catch((e) => {\n        console.error(\"MSafe connect error:\", e);\n      });\n    }\n  }\n  get url() {\n    const defaultOrigin = this._origin instanceof Array ? this._origin[0] : this._origin;\n    if (typeof window === \"undefined\" || typeof window.location === \"undefined\" || typeof window.location.href === \"undefined\")\n      return MSafeWallet.getOrigin(defaultOrigin);\n    return MSafeWallet.getAppUrl(defaultOrigin);\n  }\n  async connect() {\n    try {\n      const accountInfo = await this.provider?.connect();\n      if (!accountInfo)\n        throw `${MSafeWalletName} Address Info Error`;\n      return accountInfo;\n    } catch (error) {\n      throw error;\n    }\n  }\n  async account() {\n    const response = await this.provider?.account();\n    if (!response)\n      throw `${MSafeWalletName} Account Error`;\n    return response;\n  }\n  async disconnect() {\n    try {\n      await this.provider?.disconnect();\n    } catch (error) {\n      throw error;\n    }\n  }\n  async signAndSubmitTransaction(transaction, options) {\n    try {\n      const response = await this.provider?.signAndSubmitTransaction(\n        transaction,\n        options\n      );\n      if (response.code) {\n        throw new Error(response.message);\n      }\n      return response;\n    } catch (error) {\n      const errMsg = error.message;\n      throw errMsg;\n    }\n  }\n  async signMessage(message) {\n    try {\n      if (typeof message !== \"object\" || !message.nonce) {\n        `${MSafeWalletName} Invalid signMessage Payload`;\n      }\n      const response = await this.provider?.signMessage(message);\n      if (response) {\n        return response;\n      } else {\n        throw `${MSafeWalletName} Sign Message failed`;\n      }\n    } catch (error) {\n      const errMsg = error.message;\n      throw errMsg;\n    }\n  }\n  async network() {\n    try {\n      const response = await this.provider?.network();\n      if (!response)\n        throw `${MSafeWalletName} Network Error`;\n      return {\n        name: response\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n  async onNetworkChange(callback) {\n    try {\n      const handleNetworkChange = async (newNetwork) => {\n        callback({\n          name: newNetwork.networkName,\n          chainId: void 0,\n          api: void 0\n        });\n      };\n      await this.provider?.onNetworkChange(handleNetworkChange);\n    } catch (error) {\n      const errMsg = error.message;\n      throw errMsg;\n    }\n  }\n  async onAccountChange(callback) {\n    try {\n      const handleAccountChange = async (newAccount) => {\n        if (newAccount?.publicKey) {\n          callback({\n            publicKey: newAccount.publicKey,\n            address: newAccount.address\n          });\n        } else {\n          const response = await this.connect();\n          callback({\n            address: response?.address,\n            publicKey: response?.publicKey\n          });\n        }\n      };\n      await this.provider?.onAccountChange(handleAccountChange);\n    } catch (error) {\n      console.log(error);\n      const errMsg = error.message;\n      throw errMsg;\n    }\n  }\n};\nexport {\n  MSafeWalletAdapter,\n  MSafeWalletName\n};\n"],
  "mappings": "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",
  "names": ["captureStackTrace", "setFunctionName", "JsonRpcError", "InvalidJson", "InvalidRequest", "MethodNotFound", "InvalidParameters", "version", "parse", "format", "import_json_rpc_protocol", "WalletEvent", "WalletRPC", "parse", "version", "version", "version", "handshakeMessage", "parse", "format"]
}
