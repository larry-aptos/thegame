import {
  require_buffer
} from "./chunk-RD5UI6NA.js";
import {
  HexString
} from "./chunk-R3KJZ7NN.js";
import {
  __commonJS,
  __toESM
} from "./chunk-WNKWOKNR.js";

// node_modules/.pnpm/make-error@1.3.6/node_modules/make-error/index.js
var require_make_error = __commonJS({
  "node_modules/.pnpm/make-error@1.3.6/node_modules/make-error/index.js"(exports, module) {
    "use strict";
    var construct = typeof Reflect !== "undefined" ? Reflect.construct : void 0;
    var defineProperty = Object.defineProperty;
    var captureStackTrace = Error.captureStackTrace;
    if (captureStackTrace === void 0) {
      captureStackTrace = function captureStackTrace2(error) {
        var container = new Error();
        defineProperty(error, "stack", {
          configurable: true,
          get: function getStack() {
            var stack = container.stack;
            defineProperty(this, "stack", {
              configurable: true,
              value: stack,
              writable: true
            });
            return stack;
          },
          set: function setStack(stack) {
            defineProperty(error, "stack", {
              configurable: true,
              value: stack,
              writable: true
            });
          }
        });
      };
    }
    function BaseError(message) {
      if (message !== void 0) {
        defineProperty(this, "message", {
          configurable: true,
          value: message,
          writable: true
        });
      }
      var cname = this.constructor.name;
      if (cname !== void 0 && cname !== this.name) {
        defineProperty(this, "name", {
          configurable: true,
          value: cname,
          writable: true
        });
      }
      captureStackTrace(this, this.constructor);
    }
    BaseError.prototype = Object.create(Error.prototype, {
      // See: https://github.com/JsCommunity/make-error/issues/4
      constructor: {
        configurable: true,
        value: BaseError,
        writable: true
      }
    });
    var setFunctionName = function() {
      function setFunctionName2(fn, name) {
        return defineProperty(fn, "name", {
          configurable: true,
          value: name
        });
      }
      try {
        var f = function() {
        };
        setFunctionName2(f, "foo");
        if (f.name === "foo") {
          return setFunctionName2;
        }
      } catch (_) {
      }
    }();
    function makeError(constructor, super_) {
      if (super_ == null || super_ === Error) {
        super_ = BaseError;
      } else if (typeof super_ !== "function") {
        throw new TypeError("super_ should be a function");
      }
      var name;
      if (typeof constructor === "string") {
        name = constructor;
        constructor = construct !== void 0 ? function() {
          return construct(super_, arguments, this.constructor);
        } : function() {
          super_.apply(this, arguments);
        };
        if (setFunctionName !== void 0) {
          setFunctionName(constructor, name);
          name = void 0;
        }
      } else if (typeof constructor !== "function") {
        throw new TypeError("constructor should be either a string or a function");
      }
      constructor.super_ = constructor["super"] = super_;
      var properties = {
        constructor: {
          configurable: true,
          value: constructor,
          writable: true
        }
      };
      if (name !== void 0) {
        properties.name = {
          configurable: true,
          value: name,
          writable: true
        };
      }
      constructor.prototype = Object.create(super_.prototype, properties);
      return constructor;
    }
    exports = module.exports = makeError;
    exports.BaseError = BaseError;
  }
});

// node_modules/.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/dist/errors.js
var require_errors = __commonJS({
  "node_modules/.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/dist/errors.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidParameters = exports.MethodNotFound = exports.InvalidRequest = exports.InvalidJson = exports.JsonRpcError = void 0;
    var make_error_1 = require_make_error();
    var JsonRpcError2 = (
      /** @class */
      function(_super) {
        __extends(JsonRpcError3, _super);
        function JsonRpcError3(message, code, data) {
          if (message === void 0) {
            message = "unknown error from the peer";
          }
          if (code === void 0) {
            code = -32e3;
          }
          var _this = _super.call(this, message) || this;
          _this.code = code;
          _this.data = data;
          return _this;
        }
        JsonRpcError3.prototype.toJsonRpcError = function() {
          return {
            code: this.code,
            data: this.data,
            message: this.message
          };
        };
        return JsonRpcError3;
      }(make_error_1.BaseError)
    );
    exports.JsonRpcError = JsonRpcError2;
    var InvalidJson = (
      /** @class */
      function(_super) {
        __extends(InvalidJson2, _super);
        function InvalidJson2() {
          return _super.call(this, "invalid JSON", -32700) || this;
        }
        return InvalidJson2;
      }(JsonRpcError2)
    );
    exports.InvalidJson = InvalidJson;
    var InvalidRequest = (
      /** @class */
      function(_super) {
        __extends(InvalidRequest2, _super);
        function InvalidRequest2(message) {
          if (message === void 0) {
            message = "invalid JSON-RPC request";
          }
          return _super.call(this, message, -32600) || this;
        }
        return InvalidRequest2;
      }(JsonRpcError2)
    );
    exports.InvalidRequest = InvalidRequest;
    var MethodNotFound = (
      /** @class */
      function(_super) {
        __extends(MethodNotFound2, _super);
        function MethodNotFound2(method) {
          var _this = this;
          var message = method ? "method not found: " + method : "method not found";
          _this = _super.call(this, message, -32601, method) || this;
          return _this;
        }
        return MethodNotFound2;
      }(JsonRpcError2)
    );
    exports.MethodNotFound = MethodNotFound;
    var InvalidParameters = (
      /** @class */
      function(_super) {
        __extends(InvalidParameters2, _super);
        function InvalidParameters2(data) {
          return _super.call(this, "invalid parameter(s)", -32602, data) || this;
        }
        return InvalidParameters2;
      }(JsonRpcError2)
    );
    exports.InvalidParameters = InvalidParameters;
  }
});

// node_modules/.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/dist/format.js
var require_format = __commonJS({
  "node_modules/.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/dist/format.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.response = exports.request = exports.notification = exports.error = void 0;
    var errors_1 = require_errors();
    var toJson = JSON.stringify;
    exports.error = function(id, err) {
      if (err == null || typeof err.toJsonRpcError !== "function") {
        err = new errors_1.JsonRpcError();
      }
      var errorPayload = err.toJsonRpcError();
      return toJson({
        error: errorPayload,
        id,
        jsonrpc: "2.0"
      });
    };
    exports.notification = function(method, params) {
      return toJson({
        jsonrpc: "2.0",
        method,
        params
      });
    };
    exports.request = function(id, method, params) {
      return toJson({
        id,
        jsonrpc: "2.0",
        method,
        params
      });
    };
    exports.response = function(id, result) {
      return toJson({
        id,
        jsonrpc: "2.0",
        result
      });
    };
  }
});

// node_modules/.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/dist/json-rpc.type.js
var require_json_rpc_type = __commonJS({
  "node_modules/.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/dist/json-rpc.type.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/dist/types.js
var require_types = __commonJS({
  "node_modules/.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isObject = exports.isString = exports.isInteger = exports.isNumber = void 0;
    var negativeInf = Number.NEGATIVE_INFINITY;
    var positiveInf = Number.POSITIVE_INFINITY;
    exports.isNumber = function(value) {
      var type = typeof value;
      return type === "number" && value > negativeInf && value < positiveInf;
    };
    exports.isInteger = function(value) {
      return exports.isNumber(value) && value % 1 === 0;
    };
    exports.isString = function(value) {
      return typeof value === "string";
    };
    exports.isObject = function(value) {
      var type = typeof value;
      return value !== null && (type === "object" || type === "function");
    };
  }
});

// node_modules/.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/dist/parse.js
var require_parse = __commonJS({
  "node_modules/.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/dist/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parse = exports.isResponsePayload = exports.isErrorPayload = exports.isRequestPayload = exports.isNotificationPayload = void 0;
    var types_1 = require_types();
    var errors_1 = require_errors();
    var defineProperty = Object.defineProperty;
    var setMessageType = function(message, type) {
      return defineProperty(message, "type", {
        configurable: true,
        value: type,
        writable: true
      });
    };
    var getType = function(value) {
      return value === null ? "null" : typeof value;
    };
    var checkError = function(error, version2) {
      if (version2 === "1.0") {
        if (error == null) {
          throw new errors_1.InvalidRequest("invalid error " + getType(error));
        }
      } else if (error == null || !types_1.isInteger(error.code) || !types_1.isString(error.message)) {
        throw new errors_1.InvalidRequest("invalid error: " + getType(error) + " instead of {code, message}");
      }
    };
    var checkId = function(id) {
      if (!types_1.isNumber(id) && !types_1.isString(id)) {
        throw new errors_1.InvalidRequest("invalid identifier: " + getType(id) + " instead of number or string");
      }
    };
    var checkParams = function(params, version2) {
      if (version2 === "2.0") {
        if (params !== void 0 && !Array.isArray(params) && !types_1.isObject(params)) {
          throw new errors_1.InvalidRequest("invalid params: " + getType(params) + " instead of undefined, array or object");
        }
      } else {
        if (!Array.isArray(params)) {
          throw new errors_1.InvalidRequest("invalid params: " + getType(params) + " instead of array");
        }
      }
    };
    var detectJsonRpcVersion = function(_a) {
      var jsonrpc = _a.jsonrpc;
      if (jsonrpc === void 0) {
        return "1.0";
      }
      if (jsonrpc === "2.0") {
        return "2.0";
      }
      throw new errors_1.InvalidRequest("invalid version: " + getType(jsonrpc) + " instead of undefined or '2.0'");
    };
    var isNotificationId = function(id, version2) {
      return id === (version2 === "2.0" ? void 0 : null);
    };
    var isErrorResponse = function(_a, version2) {
      var error = _a.error;
      return error !== (version2 === "2.0" ? void 0 : null);
    };
    exports.isNotificationPayload = function(message, version2) {
      if (types_1.isString(message.method)) {
        var id = message.id;
        if (isNotificationId(id, version2)) {
          checkParams(message.params, version2);
          return true;
        }
      }
      return false;
    };
    exports.isRequestPayload = function(message, version2) {
      if (types_1.isString(message.method)) {
        var id = message.id;
        if (!isNotificationId(id, version2)) {
          checkId(id);
          checkParams(message.params, version2);
          return true;
        }
      }
      return false;
    };
    exports.isErrorPayload = function(message, version2) {
      if (!types_1.isString(message.method)) {
        if (isErrorResponse(message, version2)) {
          var id = message.id;
          if (id !== null) {
            checkId(id);
          }
          checkError(message.error, version2);
          return true;
        }
      }
      return false;
    };
    exports.isResponsePayload = function(message, version2) {
      if (!types_1.isString(message.method)) {
        if (!isErrorResponse(message, version2)) {
          checkId(message.id);
          return true;
        }
      }
      return false;
    };
    function parse3(message) {
      if (types_1.isString(message)) {
        try {
          message = JSON.parse(message);
        } catch (error) {
          if (error instanceof SyntaxError) {
            throw new errors_1.InvalidJson();
          }
          throw error;
        }
      }
      if (Array.isArray(message)) {
        return message.map(parse3);
      }
      var version2 = detectJsonRpcVersion(message);
      if (exports.isNotificationPayload(message, version2)) {
        setMessageType(message, "notification");
      } else if (exports.isRequestPayload(message, version2)) {
        setMessageType(message, "request");
      } else if (exports.isErrorPayload(message, version2)) {
        setMessageType(message, "error");
      } else if (exports.isResponsePayload(message, version2)) {
        setMessageType(message, "response");
      } else {
        throw new errors_1.InvalidJson();
      }
      return message;
    }
    exports.parse = parse3;
    exports.default = parse3;
    parse3.result = function result(message) {
      var parsed = parse3(message);
      if (!Array.isArray(parsed)) {
        if (parsed.type === "error") {
          throw parsed.error;
        }
        if (parsed.type === "response") {
          return parsed.result;
        }
      }
      throw new TypeError("message should be response or error JSON-RPC message");
    };
  }
});

// node_modules/.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/dist/index.js
var require_dist = __commonJS({
  "node_modules/.pnpm/json-rpc-protocol@0.13.2/node_modules/json-rpc-protocol/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !exports2.hasOwnProperty(p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.format = void 0;
    var format3 = __importStar(require_format());
    exports.format = format3;
    __exportStar(require_json_rpc_type(), exports);
    __exportStar(require_errors(), exports);
    var parse_1 = require_parse();
    Object.defineProperty(exports, "parse", { enumerable: true, get: function() {
      return parse_1.parse;
    } });
  }
});

// node_modules/.pnpm/msafe-wallet@2.1.5/node_modules/msafe-wallet/dist/index.mjs
var import_json_rpc_protocol = __toESM(require_dist(), 1);
var import_buffer = __toESM(require_buffer(), 1);
var import_json_rpc_protocol2 = __toESM(require_dist(), 1);
function concat(list) {
  const total = list.reduce((size, a) => size + a.length, 0);
  const arr = new Uint8Array(total);
  let offset = 0;
  list.forEach((a) => {
    arr.set(a, offset);
    offset += a.length;
  });
  return arr;
}
var Decoder = class {
  constructor(data, byteOffset = data.byteOffset) {
    this.data = data;
    this.byteOffset = byteOffset;
  }
  read(byteLength) {
    const result = new Uint8Array(this.data.buffer, this.byteOffset, byteLength);
    this.byteOffset += byteLength;
    return result;
  }
  decodeBigInt() {
    return BigInt(this.decodeString());
  }
  decodeNumber() {
    return Number(this.decodeString());
  }
  decodeUint8Array() {
    const length = new Uint32Array(this.read(4).slice(0).buffer)[0];
    return this.read(length);
  }
  decodeBoolean() {
    return Boolean(this.read(1)[0]);
  }
  decodeString() {
    const de = this.decodeUint8Array();
    return import_buffer.Buffer.from(de).toString();
  }
  decodeArray() {
    const length = this.decode();
    return Array(length).fill(0).map(() => this.decode());
  }
  decodeObject() {
    const length = this.decode();
    const entries = Array(length).fill(0).map(() => [this.decode(), this.decode()]);
    return Object.fromEntries(entries);
  }
  decode() {
    const type = this.read(1)[0];
    switch (type) {
      case 2:
        return this.decodeBigInt();
      case 1:
        return this.decodeNumber();
      case 0:
        return this.decodeBoolean();
      case 3:
        return this.decodeString();
      case 4:
        return this.decodeUint8Array();
      case 6:
        return this.decodeArray();
      case 5:
        return this.decodeObject();
      case 7:
        return void 0;
      case 8:
        return null;
    }
    throw `unkonw type: ${type}`;
  }
};
function encodeUint8Array(data) {
  const en = new Uint8Array(data.length + 5);
  en[0] = 4;
  import_buffer.Buffer.from(en.buffer, 1, 4).writeUInt32LE(data.length);
  en.set(data, 5);
  return en;
}
function encodeUndefined() {
  return Uint8Array.from([
    7
    /* Undefined */
  ]);
}
function encodeNull() {
  return Uint8Array.from([
    8
    /* Null */
  ]);
}
function encodeBigInt(data) {
  const en = encodeString(data.toString());
  en[0] = 2;
  return en;
}
function encodeNumber(data) {
  const en = encodeString(data.toString());
  en[0] = 1;
  return en;
}
function encodeBoolean(data) {
  return new Uint8Array([0, Number(data)]);
}
function encodeString(data) {
  const buf = new ArrayBuffer(data.length);
  import_buffer.Buffer.from(buf).write(data);
  const en = encodeUint8Array(new Uint8Array(buf));
  en[0] = 3;
  return en;
}
function encodeObject(data) {
  const entries = Object.entries(data);
  const ens = entries.map(([key, value]) => {
    const keyBuf = encode(key);
    const valueBuf = encode(value);
    return concat([keyBuf, valueBuf]);
  });
  return concat([Uint8Array.from([
    5
    /* Object */
  ]), encode(entries.length), ...ens]);
}
function encodeArray(data) {
  const ens = data.map((elem) => encode(elem));
  return concat([Uint8Array.from([
    6
    /* Array */
  ]), encode(ens.length), ...ens]);
}
function encode(data) {
  if (data instanceof Uint8Array) {
    return encodeUint8Array(data);
  }
  if (data instanceof Array) {
    return encodeArray(data);
  }
  if (data instanceof Object) {
    return encodeObject(data);
  }
  if (data === null) {
    return encodeNull();
  }
  switch (typeof data) {
    case "string":
      return encodeString(data);
    case "number":
      return encodeNumber(data);
    case "bigint":
      return encodeBigInt(data);
    case "boolean":
      return encodeBoolean(data);
    case "undefined":
      return encodeUndefined();
  }
  throw `unsuport type: ${data}`;
}
function decode(data) {
  const decoder = new Decoder(data);
  return decoder.decode();
}
function encodeToStr(data) {
  return import_buffer.Buffer.from(encode(data).buffer).toString("hex");
}
function decodeFromStr(data) {
  const buffer = new ArrayBuffer(data.length / 2);
  import_buffer.Buffer.from(buffer).write(data, "hex");
  return decode(new Uint8Array(buffer));
}
var WalletEvent = ((WalletEvent2) => {
  WalletEvent2["ChangeAccount"] = "ChangeAccountEvent";
  WalletEvent2["ChangeNetwork"] = "ChangeNetworkEvent";
  return WalletEvent2;
})(WalletEvent || {});
var WalletRPC = ((WalletRPC2) => {
  WalletRPC2["connect"] = "connect";
  WalletRPC2["disconnect"] = "disconnect";
  WalletRPC2["isConnected"] = "isConnected";
  WalletRPC2["network"] = "network";
  WalletRPC2["account"] = "account";
  WalletRPC2["chainId"] = "chainId";
  WalletRPC2["signAndSubmit"] = "signAndSubmit";
  WalletRPC2["signTransaction"] = "signTransaction";
  WalletRPC2["signMessage"] = "signMessage";
  return WalletRPC2;
})(WalletRPC || {});
function cmp(a, b) {
  const parse3 = (version2) => version2.split(".").map(Number);
  const [majorA, minorA, batchA] = parse3(a);
  const [majorB, minorB, batchB] = parse3(b);
  if (majorA > majorB)
    return 1;
  if (majorA < majorB)
    return -1;
  if (minorA > minorB)
    return 1;
  if (minorA < minorB)
    return -1;
  if (batchA > batchB)
    return 1;
  if (batchA < batchB)
    return -1;
  return 0;
}
function isSessionIDVersion(version2) {
  return version2 !== void 0 && cmp(
    version2,
    "2.1.4"
    /* SESSION_ID */
  ) >= 0;
}
function isAllowList(version2) {
  return version2 !== void 0 && cmp(
    version2,
    "2.0.5"
    /* ALLOWLIST */
  ) >= 0;
}
function isVersionedHandshakeVersion(version2) {
  return version2 !== void 0;
}
var version = "2.1.4";
var _HandshakeMessage = class {
  constructor(handshakeType, version2, sessionID) {
    this.handshakeType = handshakeType;
    if (version2 !== void 0)
      this.version = version2;
    if (sessionID !== void 0)
      this.sessionID = sessionID;
  }
  toString(messageVersion) {
    if (isSessionIDVersion(messageVersion)) {
      if (this.sessionID === void 0)
        throw Error("sessionID is undefined");
      return `${this.handshakeType}:${this.version}:${this.sessionID}`;
    }
    if (isVersionedHandshakeVersion(messageVersion))
      return `${this.handshakeType}:${this.version}`;
    return this.handshakeType;
  }
  isHandshakeMessage(handshakeType) {
    if (this.handshakeType !== handshakeType)
      return false;
    if (isSessionIDVersion(this.version) && this.sessionID === void 0)
      return false;
    return true;
  }
  static fromString(message) {
    const [handshakeType, version2, sessionID] = message.split(":");
    return new _HandshakeMessage(handshakeType, version2, Number(sessionID));
  }
};
var HandshakeMessage = _HandshakeMessage;
HandshakeMessage.HANDSHAKE_REQ = "HANDSHAKE_REQ";
HandshakeMessage.HANDSHAKE_ACK = "HANDSHAKE_ACK";
HandshakeMessage.HANDSHAKE_PORT_ACK = "HANDSHAKE_PORT_REQ";
var _Connector = class {
  constructor(port, peerVersion, sessionID) {
    this.port = port;
    this.peerVersion = peerVersion;
    this.sessionID = sessionID;
    this.connected = true;
    this.port.onmessage = (ev) => {
      this.onMessage && this.onMessage(ev.data);
    };
    this.port.onmessageerror = () => {
      this.close();
    };
  }
  send(data) {
    this.port.postMessage(data);
  }
  on(type, handle) {
    switch (type) {
      case "close":
        this.onClose = handle;
        break;
      case "message":
        this.onMessage = handle;
        break;
      default:
        throw Error("invlaid type");
    }
  }
  get version() {
    return {
      self: _Connector.version,
      peer: this.peerVersion
    };
  }
  close() {
    if (this.connected) {
      this.port.close();
      this.connected = false;
      this.onClose && this.onClose();
    }
  }
  static newSessionID() {
    return _Connector.sessionID++;
  }
  static async connect(targetWindow, origins) {
    return new Promise((resolve, rejected) => {
      const sessionID = _Connector.newSessionID();
      let cleaner = () => {
      };
      let timer = setTimeout(() => {
        cleaner();
        rejected(`connect timeout: ${sessionID}`);
      }, 1e3);
      const handle = (ev) => {
        const port = ev.ports[0];
        if (!origins.includes(ev.origin))
          return;
        if (typeof ev.data !== "string")
          return;
        const handshakeMessage2 = HandshakeMessage.fromString(ev.data);
        if (!handshakeMessage2.isHandshakeMessage(HandshakeMessage.HANDSHAKE_PORT_ACK))
          return;
        if (handshakeMessage2.sessionID !== sessionID)
          return;
        cleaner();
        resolve(new _Connector(port, handshakeMessage2.version, sessionID));
      };
      cleaner = () => {
        clearTimeout(timer);
        window.removeEventListener("message", handle);
      };
      window.addEventListener("message", handle);
      const handshakeMessage = new HandshakeMessage(HandshakeMessage.HANDSHAKE_REQ, _Connector.version, sessionID);
      targetWindow.postMessage(handshakeMessage.toString(handshakeMessage.version), "*");
    });
  }
  static accepts(origin, handler) {
    origin = new URL(origin).origin;
    const handle = (ev) => {
      if (ev.origin !== origin)
        return;
      if (typeof ev.data !== "string")
        return;
      const handshakeMessage = HandshakeMessage.fromString(ev.data);
      if (!handshakeMessage.isHandshakeMessage(HandshakeMessage.HANDSHAKE_REQ))
        return;
      const peerVersion = handshakeMessage.version;
      const thisVersion = _Connector.version;
      if (isSessionIDVersion(peerVersion)) {
        const channelPair = new MessageChannel();
        const replyMessage = new HandshakeMessage(HandshakeMessage.HANDSHAKE_PORT_ACK, thisVersion, handshakeMessage.sessionID);
        ev.source.postMessage(replyMessage.toString(peerVersion), ev.origin, [channelPair.port2]);
        handler(new _Connector(channelPair.port1, peerVersion, handshakeMessage.sessionID));
      } else if (isAllowList(peerVersion)) {
        const channelPair = new MessageChannel();
        const replyMessage = new HandshakeMessage(HandshakeMessage.HANDSHAKE_PORT_ACK, thisVersion);
        ev.source.postMessage(replyMessage.toString(peerVersion), ev.origin, [channelPair.port2]);
        handler(new _Connector(channelPair.port1, peerVersion, void 0));
      } else {
        const port = ev.ports[0];
        const replyMessage = new HandshakeMessage(HandshakeMessage.HANDSHAKE_ACK, thisVersion);
        port.postMessage(replyMessage.toString(peerVersion));
        handler(new _Connector(ev.ports[0], peerVersion, void 0));
      }
    };
    window.addEventListener("message", handle);
    return () => window.removeEventListener("message", handle);
  }
  static async accept(origin) {
    return new Promise((resolve) => {
      const cleaner = this.accepts(origin, (connector) => {
        resolve(connector);
        cleaner();
      });
    });
  }
};
var Connector = _Connector;
Connector.version = version;
Connector.sessionID = 0;
var JsonRPCClient = class {
  constructor(connector, notifiers) {
    this.connector = connector;
    this.notifiers = notifiers;
    this.id = 0;
    this.executors = {};
    this.connector.on("message", (data) => this.onMessage(data));
    this.connector.on("close", () => this.onClose());
  }
  onMessage(data) {
    const mesg = (0, import_json_rpc_protocol2.parse)(data);
    switch (mesg.type) {
      case "notification":
        return this.onNotify(mesg.method, mesg.params.map(decodeFromStr));
      case "response":
        const { resolve } = this.executors[Number(mesg.id)];
        delete this.executors[Number(mesg.id)];
        return resolve(decodeFromStr(mesg.result));
      case "error":
        const { reject } = this.executors[Number(mesg.id)];
        delete this.executors[Number(mesg.id)];
        return reject(mesg.error.message);
    }
  }
  async request(method, params = []) {
    return new Promise((resolve, reject) => {
      const reqId = this.id++;
      this.executors[reqId] = { resolve, reject };
      const req = import_json_rpc_protocol2.format.request(reqId, method, params.map(encodeToStr));
      this.connector.send(req);
    });
  }
  get version() {
    return this.connector.version;
  }
  onNotify(type, data) {
    this.notifiers[type](...data);
  }
  onClose() {
  }
};
var MSafeOrigins = {
  mainnet: "https://app.m-safe.io",
  testnet: "https://testnet.m-safe.io",
  partner: "https://partner.m-safe.io"
};
var DefaultMSafeEndpoints = Object.values(MSafeOrigins);
var MSafeWallet = class {
  constructor(connector) {
    this.events = {};
    const onEvent = (type, ...params) => {
      const cbk = this.events[type];
      cbk && cbk(params[0]);
    };
    const entries = [
      "ChangeAccountEvent",
      "ChangeNetworkEvent"
      /* ChangeNetwork */
    ].map((event) => [event, (...params) => onEvent(event, ...params)]);
    const notifiers = Object.fromEntries(entries);
    this.client = new JsonRPCClient(connector, notifiers);
  }
  async connect() {
    return this.client.request(
      "connect"
      /* connect */
    );
  }
  async isConnected() {
    return this.client.request(
      "isConnected"
      /* isConnected */
    );
  }
  async disconnect() {
    return this.client.request(
      "disconnect"
      /* disconnect */
    );
  }
  onChangeAccount(cbk) {
    this.events[
      "ChangeAccountEvent"
      /* ChangeAccount */
    ] = cbk;
  }
  onChangeNetwork(cbk) {
    this.events[
      "ChangeNetworkEvent"
      /* ChangeNetwork */
    ] = cbk;
  }
  async network() {
    return this.client.request(
      "network"
      /* network */
    );
  }
  async account() {
    return this.client.request(
      "account"
      /* account */
    );
  }
  async chainId() {
    return this.client.request(
      "chainId"
      /* chainId */
    );
  }
  async signAndSubmit(payload, option) {
    return this.client.request("signAndSubmit", [payload, option]);
  }
  async signTransaction(payload, option) {
    return this.client.request("signTransaction", [payload, option]);
  }
  async signMessage(message) {
    return this.client.request("signMessage", [message]);
  }
  get version() {
    return this.client.version;
  }
  static inMSafeWallet() {
    return typeof window !== "undefined" && typeof document !== "undefined" && typeof parent !== "undefined" && typeof parent.window !== "undefined" && parent.window !== window;
  }
  static inMsafeWallet() {
    return MSafeWallet.inMSafeWallet();
  }
  static getAppUrl(msafe = "mainnet", dappUrl = `${window.location.href}`) {
    const msafeOrigin = MSafeWallet.getOrigin(msafe);
    return `${msafeOrigin}/aptos/v2/store/0?url=${encodeURIComponent(dappUrl)}`;
  }
  static getOrigin(msafeNetwork = "mainnet") {
    const endpoint = MSafeOrigins[msafeNetwork.toLowerCase()] || msafeNetwork;
    return new URL(endpoint).origin;
  }
  static async new(allowlist = DefaultMSafeEndpoints) {
    const msafeOrigin = allowlist instanceof Array ? allowlist.map((m) => MSafeWallet.getOrigin(m)) : [MSafeWallet.getOrigin(allowlist)];
    const connector = await Connector.connect(window.parent, msafeOrigin);
    return new MSafeWallet(connector);
  }
};

// node_modules/.pnpm/msafe-plugin-wallet-adapter@0.1.0/node_modules/msafe-plugin-wallet-adapter/dist/index.mjs
var toNetworkName = (network) => network;
function toPluginProvider(msafe) {
  return {
    connect: () => {
      return msafe.connect();
    },
    account: () => {
      return msafe.account();
    },
    disconnect: () => {
      return msafe.disconnect();
    },
    signAndSubmitTransaction: async (transaction, options) => {
      const result = await msafe.signAndSubmit(transaction, options);
      return { hash: HexString.fromUint8Array(result).hex() };
    },
    signMessage: (message) => {
      throw "unpported";
    },
    network: () => {
      return msafe.network().then((network) => toNetworkName(network));
    },
    onAccountChange: async (listener) => {
      return msafe.onChangeAccount((newAddress) => listener(newAddress));
    },
    onNetworkChange: async (listener) => {
      const listenerProxy = async (network) => {
        const chainId = await msafe.chainId();
        const networkName = {
          name: toNetworkName(network),
          chainId: chainId.toString()
        };
        listener({ networkName });
      };
      return msafe.onChangeNetwork((network) => listenerProxy(network));
    }
  };
}
var LOGO_PNG_BASE64 = "";
var MSafeWalletName = "MSafe";
var MSafeWalletAdapter = class {
  constructor(origin) {
    this.name = MSafeWalletName;
    this.icon = `data:image/png;base64,${LOGO_PNG_BASE64}`;
    this.provider = void 0;
    this._origin = origin;
    if (MSafeWallet.inMSafeWallet()) {
      MSafeWallet.new(origin).then((msafe) => {
        window.msafe = this.provider = toPluginProvider(msafe);
      }).catch((e) => {
        console.error("MSafe connect error:", e);
      });
    }
  }
  get url() {
    const defaultOrigin = this._origin instanceof Array ? this._origin[0] : this._origin;
    if (typeof window === "undefined" || typeof window.location === "undefined" || typeof window.location.href === "undefined")
      return MSafeWallet.getOrigin(defaultOrigin);
    return MSafeWallet.getAppUrl(defaultOrigin);
  }
  async connect() {
    var _a;
    try {
      const accountInfo = await ((_a = this.provider) == null ? void 0 : _a.connect());
      if (!accountInfo)
        throw `${MSafeWalletName} Address Info Error`;
      return accountInfo;
    } catch (error) {
      throw error;
    }
  }
  async account() {
    var _a;
    const response = await ((_a = this.provider) == null ? void 0 : _a.account());
    if (!response)
      throw `${MSafeWalletName} Account Error`;
    return response;
  }
  async disconnect() {
    var _a;
    try {
      await ((_a = this.provider) == null ? void 0 : _a.disconnect());
    } catch (error) {
      throw error;
    }
  }
  async signAndSubmitTransaction(transaction, options) {
    var _a;
    try {
      const response = await ((_a = this.provider) == null ? void 0 : _a.signAndSubmitTransaction(
        transaction,
        options
      ));
      if (response.code) {
        throw new Error(response.message);
      }
      return response;
    } catch (error) {
      const errMsg = error.message;
      throw errMsg;
    }
  }
  async signMessage(message) {
    var _a;
    try {
      if (typeof message !== "object" || !message.nonce) {
        `${MSafeWalletName} Invalid signMessage Payload`;
      }
      const response = await ((_a = this.provider) == null ? void 0 : _a.signMessage(message));
      if (response) {
        return response;
      } else {
        throw `${MSafeWalletName} Sign Message failed`;
      }
    } catch (error) {
      const errMsg = error.message;
      throw errMsg;
    }
  }
  async network() {
    var _a;
    try {
      const response = await ((_a = this.provider) == null ? void 0 : _a.network());
      if (!response)
        throw `${MSafeWalletName} Network Error`;
      return {
        name: response
      };
    } catch (error) {
      throw error;
    }
  }
  async onNetworkChange(callback) {
    var _a;
    try {
      const handleNetworkChange = async (newNetwork) => {
        callback({
          name: newNetwork.networkName,
          chainId: void 0,
          api: void 0
        });
      };
      await ((_a = this.provider) == null ? void 0 : _a.onNetworkChange(handleNetworkChange));
    } catch (error) {
      const errMsg = error.message;
      throw errMsg;
    }
  }
  async onAccountChange(callback) {
    var _a;
    try {
      const handleAccountChange = async (newAccount) => {
        if (newAccount == null ? void 0 : newAccount.publicKey) {
          callback({
            publicKey: newAccount.publicKey,
            address: newAccount.address
          });
        } else {
          const response = await this.connect();
          callback({
            address: response == null ? void 0 : response.address,
            publicKey: response == null ? void 0 : response.publicKey
          });
        }
      };
      await ((_a = this.provider) == null ? void 0 : _a.onAccountChange(handleAccountChange));
    } catch (error) {
      console.log(error);
      const errMsg = error.message;
      throw errMsg;
    }
  }
};
export {
  MSafeWalletAdapter,
  MSafeWalletName
};
//# sourceMappingURL=msafe-plugin-wallet-adapter.js.map
