import { AccountInfo, NetworkInfo, WalletName, WalletInfo, Wallet, Types, TransactionOptions, TxnBuilderTypes, SignMessagePayload, SignMessageResponse } from '@aptos-labs/wallet-adapter-core';
export { NetworkName, Wallet, WalletName, WalletReadyState, isInAppBrowser, isMobile, isRedirectable } from '@aptos-labs/wallet-adapter-core';
import { ReactNode, FC } from 'react';

interface WalletContextState {
    connected: boolean;
    isLoading: boolean;
    account: AccountInfo | null;
    network: NetworkInfo | null;
    connect(walletName: WalletName): void;
    disconnect(): void;
    wallet: WalletInfo | null;
    wallets: ReadonlyArray<Wallet>;
    signAndSubmitTransaction<T extends Types.TransactionPayload>(transaction: T, options?: TransactionOptions): Promise<any>;
    signAndSubmitBCSTransaction<T extends TxnBuilderTypes.TransactionPayload>(transaction: T, options?: TransactionOptions): Promise<any>;
    signTransaction<T extends Types.TransactionPayload>(transaction: T, options?: TransactionOptions): Promise<any>;
    signMessage(message: SignMessagePayload): Promise<SignMessageResponse | null>;
    signMessageAndVerify(message: SignMessagePayload): Promise<boolean>;
}
declare function useWallet(): WalletContextState;

interface AptosWalletProviderProps {
    children: ReactNode;
    plugins: ReadonlyArray<Wallet>;
    autoConnect?: boolean;
    onError?: (error: any) => void;
}
declare const AptosWalletAdapterProvider: FC<AptosWalletProviderProps>;

export { AptosWalletAdapterProvider, AptosWalletProviderProps, useWallet };
