"use strict";
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
var __generator = this && this.__generator || function(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = function(target, all) {
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = function(to, from, except, desc) {
    if (from && typeof from === "object" || typeof from === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function() {
                var key = _step.value;
                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                    get: function() {
                        return from[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return to;
};
var __toCommonJS = function(mod) {
    return __copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
};
// src/index.ts
var src_exports = {};
__export(src_exports, {
    MSafeWalletAdapter: function() {
        return MSafeWalletAdapter;
    },
    MSafeWalletName: function() {
        return MSafeWalletName;
    }
});
module.exports = __toCommonJS(src_exports);
var import_msafe_wallet = require("msafe-wallet");
// src/provider.ts
var import_aptos = require("aptos");
var toNetworkName = function(network) {
    return network;
};
function toPluginProvider(msafe) {
    return {
        connect: function() {
            return msafe.connect();
        },
        account: function() {
            return msafe.account();
        },
        disconnect: function() {
            return msafe.disconnect();
        },
        signAndSubmitTransaction: function() {
            var _ref = _asyncToGenerator(function(transaction, options) {
                var result;
                return __generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                msafe.signAndSubmit(transaction, options)
                            ];
                        case 1:
                            result = _state.sent();
                            return [
                                2,
                                {
                                    hash: import_aptos.HexString.fromUint8Array(result).hex()
                                }
                            ];
                    }
                });
            });
            return function(transaction, options) {
                return _ref.apply(this, arguments);
            };
        }(),
        signMessage: function(message) {
            throw "unpported";
        },
        network: function() {
            return msafe.network().then(function(network) {
                return toNetworkName(network);
            });
        },
        onAccountChange: function() {
            var _ref = _asyncToGenerator(function(listener) {
                return __generator(this, function(_state) {
                    return [
                        2,
                        msafe.onChangeAccount(function(newAddress) {
                            return listener(newAddress);
                        })
                    ];
                });
            });
            return function(listener) {
                return _ref.apply(this, arguments);
            };
        }(),
        onNetworkChange: function() {
            var _ref = _asyncToGenerator(function(listener) {
                var listenerProxy;
                return __generator(this, function(_state) {
                    listenerProxy = function() {
                        var _ref = _asyncToGenerator(function(network) {
                            var chainId, networkName;
                            return __generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        return [
                                            4,
                                            msafe.chainId()
                                        ];
                                    case 1:
                                        chainId = _state.sent();
                                        networkName = {
                                            name: toNetworkName(network),
                                            chainId: chainId.toString()
                                        };
                                        listener({
                                            networkName: networkName
                                        });
                                        return [
                                            2
                                        ];
                                }
                            });
                        });
                        return function listenerProxy(network) {
                            return _ref.apply(this, arguments);
                        };
                    }();
                    return [
                        2,
                        msafe.onChangeNetwork(function(network) {
                            return listenerProxy(network);
                        })
                    ];
                });
            });
            return function(listener) {
                return _ref.apply(this, arguments);
            };
        }()
    };
}
// src/logo.ts
var LOGO_PNG_BASE64 = "";
// src/index.ts
var MSafeWalletName = "MSafe";
var MSafeWalletAdapter = /*#__PURE__*/ function() {
    function MSafeWalletAdapter(origin) {
        var _this = this;
        _classCallCheck(this, MSafeWalletAdapter);
        this.name = MSafeWalletName;
        this.icon = "data:image/png;base64,".concat(LOGO_PNG_BASE64);
        this.provider = void 0;
        this._origin = origin;
        if (import_msafe_wallet.MSafeWallet.inMSafeWallet()) {
            import_msafe_wallet.MSafeWallet.new(origin).then(function(msafe) {
                window.msafe = _this.provider = toPluginProvider(msafe);
            }).catch(function(e) {
                console.error("MSafe connect error:", e);
            });
        }
    }
    _createClass(MSafeWalletAdapter, [
        {
            key: "url",
            get: function get() {
                var defaultOrigin = _instanceof(this._origin, Array) ? this._origin[0] : this._origin;
                if (typeof window === "undefined" || typeof window.location === "undefined" || typeof window.location.href === "undefined") return import_msafe_wallet.MSafeWallet.getOrigin(defaultOrigin);
                return import_msafe_wallet.MSafeWallet.getAppUrl(defaultOrigin);
            }
        },
        {
            key: "connect",
            value: function connect() {
                var _this = this;
                return _asyncToGenerator(function() {
                    var _this_provider, accountInfo, error;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _state.trys.push([
                                    0,
                                    2,
                                    ,
                                    3
                                ]);
                                return [
                                    4,
                                    (_this_provider = _this.provider) === null || _this_provider === void 0 ? void 0 : _this_provider.connect()
                                ];
                            case 1:
                                accountInfo = _state.sent();
                                if (!accountInfo) throw "".concat(MSafeWalletName, " Address Info Error");
                                return [
                                    2,
                                    accountInfo
                                ];
                            case 2:
                                error = _state.sent();
                                throw error;
                            case 3:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "account",
            value: function account() {
                var _this = this;
                return _asyncToGenerator(function() {
                    var _this_provider, response;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    (_this_provider = _this.provider) === null || _this_provider === void 0 ? void 0 : _this_provider.account()
                                ];
                            case 1:
                                response = _state.sent();
                                if (!response) throw "".concat(MSafeWalletName, " Account Error");
                                return [
                                    2,
                                    response
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "disconnect",
            value: function disconnect() {
                var _this = this;
                return _asyncToGenerator(function() {
                    var _this_provider, error;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _state.trys.push([
                                    0,
                                    2,
                                    ,
                                    3
                                ]);
                                return [
                                    4,
                                    (_this_provider = _this.provider) === null || _this_provider === void 0 ? void 0 : _this_provider.disconnect()
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    3,
                                    3
                                ];
                            case 2:
                                error = _state.sent();
                                throw error;
                            case 3:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "signAndSubmitTransaction",
            value: function signAndSubmitTransaction(transaction, options) {
                var _this = this;
                return _asyncToGenerator(function() {
                    var _this_provider, response, error, errMsg;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _state.trys.push([
                                    0,
                                    2,
                                    ,
                                    3
                                ]);
                                return [
                                    4,
                                    (_this_provider = _this.provider) === null || _this_provider === void 0 ? void 0 : _this_provider.signAndSubmitTransaction(transaction, options)
                                ];
                            case 1:
                                response = _state.sent();
                                if (response.code) {
                                    throw new Error(response.message);
                                }
                                return [
                                    2,
                                    response
                                ];
                            case 2:
                                error = _state.sent();
                                errMsg = error.message;
                                throw errMsg;
                            case 3:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "signMessage",
            value: function signMessage(message) {
                var _this = this;
                return _asyncToGenerator(function() {
                    var _this_provider, response, error, errMsg;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _state.trys.push([
                                    0,
                                    2,
                                    ,
                                    3
                                ]);
                                if (typeof message !== "object" || !message.nonce) {
                                    "".concat(MSafeWalletName, " Invalid signMessage Payload");
                                }
                                return [
                                    4,
                                    (_this_provider = _this.provider) === null || _this_provider === void 0 ? void 0 : _this_provider.signMessage(message)
                                ];
                            case 1:
                                response = _state.sent();
                                if (response) {
                                    return [
                                        2,
                                        response
                                    ];
                                } else {
                                    throw "".concat(MSafeWalletName, " Sign Message failed");
                                }
                                return [
                                    3,
                                    3
                                ];
                            case 2:
                                error = _state.sent();
                                errMsg = error.message;
                                throw errMsg;
                            case 3:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "network",
            value: function network() {
                var _this = this;
                return _asyncToGenerator(function() {
                    var _this_provider, response, error;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _state.trys.push([
                                    0,
                                    2,
                                    ,
                                    3
                                ]);
                                return [
                                    4,
                                    (_this_provider = _this.provider) === null || _this_provider === void 0 ? void 0 : _this_provider.network()
                                ];
                            case 1:
                                response = _state.sent();
                                if (!response) throw "".concat(MSafeWalletName, " Network Error");
                                return [
                                    2,
                                    {
                                        name: response
                                    }
                                ];
                            case 2:
                                error = _state.sent();
                                throw error;
                            case 3:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "onNetworkChange",
            value: function onNetworkChange(callback) {
                var _this = this;
                return _asyncToGenerator(function() {
                    var _this_provider, handleNetworkChange, error, errMsg;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _state.trys.push([
                                    0,
                                    2,
                                    ,
                                    3
                                ]);
                                handleNetworkChange = function() {
                                    var _ref = _asyncToGenerator(function(newNetwork) {
                                        return __generator(this, function(_state) {
                                            callback({
                                                name: newNetwork.networkName,
                                                chainId: void 0,
                                                api: void 0
                                            });
                                            return [
                                                2
                                            ];
                                        });
                                    });
                                    return function handleNetworkChange(newNetwork) {
                                        return _ref.apply(this, arguments);
                                    };
                                }();
                                return [
                                    4,
                                    (_this_provider = _this.provider) === null || _this_provider === void 0 ? void 0 : _this_provider.onNetworkChange(handleNetworkChange)
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    3,
                                    3
                                ];
                            case 2:
                                error = _state.sent();
                                errMsg = error.message;
                                throw errMsg;
                            case 3:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "onAccountChange",
            value: function onAccountChange(callback) {
                var _this = this;
                return _asyncToGenerator(function() {
                    var _this_provider, handleAccountChange, error, errMsg;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _state.trys.push([
                                    0,
                                    2,
                                    ,
                                    3
                                ]);
                                handleAccountChange = function() {
                                    var _ref = _asyncToGenerator(function(newAccount) {
                                        var response;
                                        return __generator(this, function(_state) {
                                            switch(_state.label){
                                                case 0:
                                                    if (!(newAccount === null || newAccount === void 0 ? void 0 : newAccount.publicKey)) return [
                                                        3,
                                                        1
                                                    ];
                                                    callback({
                                                        publicKey: newAccount.publicKey,
                                                        address: newAccount.address
                                                    });
                                                    return [
                                                        3,
                                                        3
                                                    ];
                                                case 1:
                                                    return [
                                                        4,
                                                        _this.connect()
                                                    ];
                                                case 2:
                                                    response = _state.sent();
                                                    callback({
                                                        address: response === null || response === void 0 ? void 0 : response.address,
                                                        publicKey: response === null || response === void 0 ? void 0 : response.publicKey
                                                    });
                                                    _state.label = 3;
                                                case 3:
                                                    return [
                                                        2
                                                    ];
                                            }
                                        });
                                    });
                                    return function handleAccountChange(newAccount) {
                                        return _ref.apply(this, arguments);
                                    };
                                }();
                                return [
                                    4,
                                    (_this_provider = _this.provider) === null || _this_provider === void 0 ? void 0 : _this_provider.onAccountChange(handleAccountChange)
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    3,
                                    3
                                ];
                            case 2:
                                error = _state.sent();
                                console.log(error);
                                errMsg = error.message;
                                throw errMsg;
                            case 3:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return MSafeWalletAdapter;
}();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    MSafeWalletAdapter: MSafeWalletAdapter,
    MSafeWalletName: MSafeWalletName
});
