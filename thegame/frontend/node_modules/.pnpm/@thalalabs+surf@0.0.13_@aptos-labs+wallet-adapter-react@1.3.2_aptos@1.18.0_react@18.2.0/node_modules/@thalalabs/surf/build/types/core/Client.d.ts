import { AptosClient } from 'aptos';
import { ABIEntryClient, ABIViewClient, ABIRoot, EntryOptions, EntryPayload, ViewOptions, ViewPayload, DefaultABITable, ABIResourceClient, TransactionResponse } from '../types/index.js';
import { ABITable } from '../types/defaultABITable.js';
/**
 * Create a client to interact with Aptos smart contract.
 *
 * @param options.nodeUrl URL of the Aptos Node API endpoint.
 * @returns The client object.
 */
export declare function createClient<TABITable extends ABITable = DefaultABITable>(options: {
    nodeUrl: string;
}): Client<TABITable>;
export declare class Client<TABITable extends ABITable> {
    private client;
    constructor(client: AptosClient);
    /**
     * Call a view function.
     *
     * @param payload The payload object created by `createViewPayload`.
     * @param options.ledger_version The ledger version.
     * @returns The return value of view function.
     * @example
     * const viewPayload = createViewPayload(COIN_ABI, {
     *   function: 'balance',
     *   arguments: ['0x1'],
     *   type_arguments: ['0x1::aptos_coin::AptosCoin'],
     * });
     * const [balance] = await client.view(viewPayload);
     */
    view<TReturn>(payload: ViewPayload<TReturn>, options?: ViewOptions): Promise<TReturn>;
    /**
     * Submit a transaction.
     *
     * @param payload The payload object created by `createEntryPayload`.
     * @param options.account AptosAccount to submit the transaction.
     * @returns The transaction response.
     * @example
     * const entryPayload = createEntryPayload(COIN_ABI, {
     *     function: 'transfer',
     *     arguments: ['0x1', 1],
     *     type_arguments: ['0x1::aptos_coin::AptosCoin'],
     * });
     *
     * const { hash } = await client.submitTransaction(
     *     entryPayload,
     *     { account },
     * );
     */
    submitTransaction(payload: EntryPayload, options: EntryOptions): Promise<TransactionResponse>;
    /**
     * Simulate a transaction.
     *
     * @param payload The payload object created by `createEntryPayload`.
     * @param options.account AptosAccount to simulate the transaction.
     * @returns The transaction response.
     * @example
     * const entryPayload = createEntryPayload(COIN_ABI, {
     *     function: 'transfer',
     *     arguments: ['0x1', 1],
     *     type_arguments: ['0x1::aptos_coin::AptosCoin'],
     * });
     *
     * const { hash } = await client.simulateTransaction(
     *     entryPayload,
     *     { account },
     * );
     */
    simulateTransaction(payload: EntryPayload, options: EntryOptions): Promise<TransactionResponse>;
    /**
     * Create a client associated with a specific ABI.
     *
     * @param abi The ABI JSON.
     * @returns A client can call view/entry functions or get account resource.
     * @example
     * const [balance] = await client.useABI(COIN_ABI).view.balance({
     *    arguments: ['0x1'],
     *    type_arguments: ['0x1::aptos_coin::AptosCoin'],
     * });
     */
    useABI<T extends ABIRoot>(abi: T): {
        /**
         * Call an view function.
         *
         * @example
         * const [balance] = await client.useABI(COIN_ABI).view.balance({
         *     arguments: ['0x1'],
         *     type_arguments: ['0x1::aptos_coin::AptosCoin'],
         * });
         */
        view: ABIViewClient<T>;
        /**
         * Call an entry function.
         *
         * @example
         * const { hash } = await client.useABI(COIN_ABI).entry.transfer({
         *     arguments: ['0x1', 1],
         *     type_arguments: ['0x1::aptos_coin::AptosCoin'],
         *     account,
         * });
         */
        entry: ABIEntryClient<T>;
        /**
         * Get account resource.
         *
         * @example
         * const { data } = await client.useABI(COIN_ABI).resource.CoinStore({
         *     type_arguments: ['0x1::aptos_coin::AptosCoin'],
         *     account: '0x1',
         * });
         */
        resource: ABIResourceClient<TABITable, T>;
    };
    private generateRawTxn;
}
//# sourceMappingURL=Client.d.ts.map