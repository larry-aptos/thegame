import { AptosClient } from 'aptos';
import { createEntryPayload } from './createEntryPayload.js';
export class WalletClient {
    constructor({ wallet, nodeUrl }) {
        Object.defineProperty(this, "wallet", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.wallet = wallet;
        this.client = new AptosClient(nodeUrl);
    }
    async submitTransaction(payload, _ = undefined) {
        const request = payload.rawPayload;
        const { hash } = await this.wallet.signAndSubmitTransaction({
            type: 'entry_function_payload',
            ...request,
            arguments: request.arguments.map((arg) => {
                if (Array.isArray(arg)) {
                    return arg.map((item) => item.toString());
                }
                else if (typeof arg === 'object') {
                    throw new Error(`a value of struct type: ${arg} is not supported`);
                }
                else {
                    return arg.toString();
                }
            }),
        });
        const result = (await this.client.waitForTransactionWithResult(hash, {
            checkSuccess: true,
        }));
        return result;
    }
    useABI(abi) {
        return new Proxy({}, {
            get: (_, prop) => {
                const functionName = prop.toString();
                return (...args) => {
                    const payload = createEntryPayload(abi, {
                        function: functionName,
                        type_arguments: args[0].type_arguments,
                        arguments: args[0].arguments,
                    });
                    return this.submitTransaction(payload);
                };
            },
        });
    }
}
//# sourceMappingURL=WalletClient.js.map