import { useState, useRef } from 'react';
import { useWallet } from '@aptos-labs/wallet-adapter-react';
import { AptosClient } from 'aptos';
function isRawPayload(payload) {
    return payload.rawPayload !== undefined;
}
export const useSubmitTransaction = () => {
    const { signAndSubmitTransaction } = useWallet();
    const [isIdle, setIsIdle] = useState(true);
    const [isLoading, setIsLoading] = useState(false);
    const [data, setResult] = useState();
    const [error, setError] = useState();
    const idRef = useRef(0);
    function reset() {
        setIsIdle(true);
        setIsLoading(false);
        setResult(undefined);
        setError(undefined);
        idRef.current = idRef.current + 1;
    }
    async function submitTransaction(payload, { nodeUrl, onSuccess, onFailed, max_gas_amount }) {
        if (signAndSubmitTransaction === undefined) {
            return;
        }
        const id = idRef.current;
        if (!isIdle) {
            throw new Error('Transaction is already in progress');
        }
        setIsLoading(true);
        setIsIdle(false);
        const request = isRawPayload(payload) ? payload.rawPayload : payload;
        try {
            const { hash } = await signAndSubmitTransaction({
                type: 'entry_function_payload',
                ...request,
                arguments: request.arguments.map((arg) => {
                    if (Array.isArray(arg)) {
                        return arg.map((item) => item.toString());
                    }
                    else if (typeof arg === 'object') {
                        throw new Error(`a value of struct type: ${arg} is not supported`);
                    }
                    else {
                        return arg.toString();
                    }
                }),
            }, { max_gas_amount });
            const client = new AptosClient(nodeUrl);
            const result = (await client.waitForTransactionWithResult(hash, {
                checkSuccess: true,
            }));
            if (id === idRef.current) {
                try {
                    onSuccess?.(result);
                }
                catch (e) {
                    console.error(e);
                }
                setResult(result);
            }
        }
        catch (e) {
            if (id === idRef.current) {
                const error = e instanceof Error
                    ? e
                    : e
                        ? new Error(String(e))
                        : new Error('unknown error');
                try {
                    onFailed?.(error);
                }
                catch (e2) {
                    console.error(e2);
                }
                setError(error);
            }
        }
        finally {
            if (id === idRef.current) {
                setIsLoading(false);
            }
        }
    }
    return { submitTransaction, reset, isLoading, isIdle, data, error };
};
//# sourceMappingURL=useSubmitTransaction.js.map